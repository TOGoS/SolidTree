- Automatically dump periodically

- Dump RGBE data instead of Chunky dumps

- Formalize task distribution system

- Command to merge render dumps

- When dumping scenes, write a file including all settings

- Control all aspects of scene via forth control script
  - for interactive
  - command to export batch script
  
  Script commands:
    dx dy dz move-camera
    x y z set-camera-position
    yaw set-camera-yaw
    x y set-camera-resolution # should preserve current data if possible
    double-camera-resolution
    halve-camera-resolution
    projection-mode-name set-camera-projection
    fov set-camera-fov-y # Defaults horizontal fov to w/h * fov-y
    w h set-camera-aperture
    d set-camera-focal-distance
    auto-camera-focal-distance # Set focal distance to first opaque thing straight ahead
    x y w h set-render-bounds
    clear-render-bounds
    "sequential"/"random" set-sample-mode
    "quick"/"full" set-trace-mode
    get-camera-settings -> Camera
    Camera set-camera-settings 
    
    node x0 y0 z0 x1 y1 z1 -> NodeRoot
    node size make-scene-root-ncq -> NodeRoot
    node-root set-scene-root
    
    reset-exposure # Resets all pixels to black with 0 samples taken
    get-image-snapshot -> HDRImage
    
    HDRImage scale apply-exposure! -> HDRImage
    HDRImage gamma apply-gamma! -> HDRImage
    HDRImage to-rgb -> BufferedImage
    
    HDRImage file write-chunky-dump
    HDRImage file write-rgbe-data
    
    CameraSettings file write-camera-settings # Writes camera settings to file as a sequence of set-camera-... commands
    
    BufferedImage filename write-png
    
    filename dump-render-chunky
  
  Interactive mode:
  
    show-exposure
    BufferedImage show-image
  
  Specific to batch mode:
  
    average-spp expose  # Run the renderer

- ctx:... within forth as shorthand for "..." ctx-get

- For animations, give camera position (maybe other things) as function of time
  Frame is an interval.
  Pick t within the interval for each batch of pixels.
  Automatic motion blur!

- +x+y+z mode for putting levels side-by-side
  so that 8x8x8s can fit more nicely in an 80-column text file

- RGBE importer/exporter
  can use raw RGBE * w * h as file format; dimensions can be encoded in extension or guessed
  based on context
  
  - Look at Radiance for semantics of R, G, B, E; use if simple enough, otherwise use custom meaning

- Sky boxes
  store as 6-square-image vertical strip
  - export!
  - import!

- Sky spheres
  - Like sky boxes, but using a spherical projection that spaces samples more evenly

- Generate hilly terrain (use noise3 library from TMCMG!)

- ability to merge nodes from forth scripts

- Logical script/result separation
  - '<script-id> ctx-get' (in .fs) or <script-id> (in .tsn) evaluates to a Binding( Script, ContextSnapshot )
  - Bindings are lazily converted to nodes when a node is needed
  - Bindings are 'refined' with <binding>( <param>@<value>, ... ) syntax in .tsn
  - Bindings can be rebound to the current context by '<binding> rebind' in .fs
  - This will allow LoadContext.get(...) to be used in place of direct NodeLoader.get(...)
  - <name> = <script-id>( <param-overrides> ) syntax

I am trying to render this scene
35.9429701532131 -1151.658505660188 0.574698968494441 set-camera-position 3.730641276137881 set-camera-yaw -0.1963495408493623 set-camera-pitch 6.283185307179591 set-camera-roll 
